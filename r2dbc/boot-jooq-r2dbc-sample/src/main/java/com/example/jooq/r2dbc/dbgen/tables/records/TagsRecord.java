/*
 * This file is generated by jOOQ.
 */
package com.example.jooq.r2dbc.dbgen.tables.records;

import com.example.jooq.r2dbc.dbgen.tables.Tags;
import java.time.OffsetDateTime;
import java.util.UUID;
import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;

/** This class is generated by jOOQ. */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class TagsRecord extends UpdatableRecordImpl<TagsRecord>
        implements Record3<UUID, String, OffsetDateTime> {

    private static final long serialVersionUID = 1L;

    /** Setter for <code>public.tags.id</code>. */
    public void setId(UUID value) {
        set(0, value);
    }

    /** Getter for <code>public.tags.id</code>. */
    public UUID getId() {
        return (UUID) get(0);
    }

    /** Setter for <code>public.tags.name</code>. */
    public void setName(String value) {
        set(1, value);
    }

    /** Getter for <code>public.tags.name</code>. */
    public String getName() {
        return (String) get(1);
    }

    /** Setter for <code>public.tags.created_at</code>. */
    public void setCreatedAt(OffsetDateTime value) {
        set(2, value);
    }

    /** Getter for <code>public.tags.created_at</code>. */
    public OffsetDateTime getCreatedAt() {
        return (OffsetDateTime) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<UUID> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<UUID, String, OffsetDateTime> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<UUID, String, OffsetDateTime> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<UUID> field1() {
        return Tags.TAGS.ID;
    }

    @Override
    public Field<String> field2() {
        return Tags.TAGS.NAME;
    }

    @Override
    public Field<OffsetDateTime> field3() {
        return Tags.TAGS.CREATED_AT;
    }

    @Override
    public UUID component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getName();
    }

    @Override
    public OffsetDateTime component3() {
        return getCreatedAt();
    }

    @Override
    public UUID value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getName();
    }

    @Override
    public OffsetDateTime value3() {
        return getCreatedAt();
    }

    @Override
    public TagsRecord value1(UUID value) {
        setId(value);
        return this;
    }

    @Override
    public TagsRecord value2(String value) {
        setName(value);
        return this;
    }

    @Override
    public TagsRecord value3(OffsetDateTime value) {
        setCreatedAt(value);
        return this;
    }

    @Override
    public TagsRecord values(UUID value1, String value2, OffsetDateTime value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /** Create a detached TagsRecord */
    public TagsRecord() {
        super(Tags.TAGS);
    }

    /** Create a detached, initialised TagsRecord */
    public TagsRecord(UUID id, String name, OffsetDateTime createdAt) {
        super(Tags.TAGS);

        setId(id);
        setName(name);
        setCreatedAt(createdAt);
        resetChangedOnNotNull();
    }
}
