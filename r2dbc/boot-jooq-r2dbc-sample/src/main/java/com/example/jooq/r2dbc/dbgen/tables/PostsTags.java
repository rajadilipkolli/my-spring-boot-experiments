/*
 * This file is generated by jOOQ.
 */
package com.example.jooq.r2dbc.dbgen.tables;

import com.example.jooq.r2dbc.dbgen.Keys;
import com.example.jooq.r2dbc.dbgen.Public;
import com.example.jooq.r2dbc.dbgen.tables.records.PostsTagsRecord;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import java.util.function.Function;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function2;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

/** This class is generated by jOOQ. */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class PostsTags extends TableImpl<PostsTagsRecord> {

    private static final long serialVersionUID = 1L;

    /** The reference instance of <code>public.posts_tags</code> */
    public static final PostsTags POSTS_TAGS = new PostsTags();

    /** The class holding records for this type */
    @Override
    public Class<PostsTagsRecord> getRecordType() {
        return PostsTagsRecord.class;
    }

    /** The column <code>public.posts_tags.post_id</code>. */
    public final TableField<PostsTagsRecord, UUID> POST_ID =
            createField(DSL.name("post_id"), SQLDataType.UUID.nullable(false), this, "");

    /** The column <code>public.posts_tags.tag_id</code>. */
    public final TableField<PostsTagsRecord, UUID> TAG_ID =
            createField(DSL.name("tag_id"), SQLDataType.UUID.nullable(false), this, "");

    private PostsTags(Name alias, Table<PostsTagsRecord> aliased) {
        this(alias, aliased, null);
    }

    private PostsTags(Name alias, Table<PostsTagsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /** Create an aliased <code>public.posts_tags</code> table reference */
    public PostsTags(String alias) {
        this(DSL.name(alias), POSTS_TAGS);
    }

    /** Create an aliased <code>public.posts_tags</code> table reference */
    public PostsTags(Name alias) {
        this(alias, POSTS_TAGS);
    }

    /** Create a <code>public.posts_tags</code> table reference */
    public PostsTags() {
        this(DSL.name("posts_tags"), null);
    }

    public <O extends Record> PostsTags(Table<O> child, ForeignKey<O, PostsTagsRecord> key) {
        super(child, key, POSTS_TAGS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<UniqueKey<PostsTagsRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.UK_POST_TAGS);
    }

    @Override
    public List<ForeignKey<PostsTagsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.POSTS_TAGS__FK_POST_TAGS_PID, Keys.POSTS_TAGS__FK_POST_TAGS_TID);
    }

    private transient Posts _posts;
    private transient Tags _tags;

    /** Get the implicit join path to the <code>public.posts</code> table. */
    public Posts posts() {
        if (_posts == null) _posts = new Posts(this, Keys.POSTS_TAGS__FK_POST_TAGS_PID);

        return _posts;
    }

    /** Get the implicit join path to the <code>public.tags</code> table. */
    public Tags tags() {
        if (_tags == null) _tags = new Tags(this, Keys.POSTS_TAGS__FK_POST_TAGS_TID);

        return _tags;
    }

    @Override
    public PostsTags as(String alias) {
        return new PostsTags(DSL.name(alias), this);
    }

    @Override
    public PostsTags as(Name alias) {
        return new PostsTags(alias, this);
    }

    @Override
    public PostsTags as(Table<?> alias) {
        return new PostsTags(alias.getQualifiedName(), this);
    }

    /** Rename this table */
    @Override
    public PostsTags rename(String name) {
        return new PostsTags(DSL.name(name), null);
    }

    /** Rename this table */
    @Override
    public PostsTags rename(Name name) {
        return new PostsTags(name, null);
    }

    /** Rename this table */
    @Override
    public PostsTags rename(Table<?> name) {
        return new PostsTags(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<UUID, UUID> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    /** Convenience mapping calling {@link SelectField#convertFrom(Function)}. */
    public <U> SelectField<U> mapping(Function2<? super UUID, ? super UUID, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /** Convenience mapping calling {@link SelectField#convertFrom(Class, Function)}. */
    public <U> SelectField<U> mapping(
            Class<U> toType, Function2<? super UUID, ? super UUID, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
