/*
 * This file is generated by jOOQ.
 */
package com.example.jooq.r2dbc.dbgen.tables;

import com.example.jooq.r2dbc.dbgen.Keys;
import com.example.jooq.r2dbc.dbgen.Public;
import com.example.jooq.r2dbc.dbgen.tables.records.PostsRecord;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import java.util.function.Function;
import org.jooq.Check;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function8;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

/** This class is generated by jOOQ. */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class Posts extends TableImpl<PostsRecord> {

    private static final long serialVersionUID = 1L;

    /** The reference instance of <code>public.posts</code> */
    public static final Posts POSTS = new Posts();

    /** The class holding records for this type */
    @Override
    public Class<PostsRecord> getRecordType() {
        return PostsRecord.class;
    }

    /** The column <code>public.posts.id</code>. */
    public final TableField<PostsRecord, UUID> ID =
            createField(
                    DSL.name("id"),
                    SQLDataType.UUID
                            .nullable(false)
                            .defaultValue(
                                    DSL.field(DSL.raw("uuid_generate_v4()"), SQLDataType.UUID)),
                    this,
                    "");

    /** The column <code>public.posts.title</code>. */
    public final TableField<PostsRecord, String> TITLE =
            createField(DSL.name("title"), SQLDataType.CLOB.nullable(false), this, "");

    /** The column <code>public.posts.content</code>. */
    public final TableField<PostsRecord, String> CONTENT =
            createField(DSL.name("content"), SQLDataType.CLOB.nullable(false), this, "");

    /** The column <code>public.posts.status</code>. */
    public final TableField<PostsRecord, String> STATUS =
            createField(DSL.name("status"), SQLDataType.CLOB.nullable(false), this, "");

    /** The column <code>public.posts.created_at</code>. */
    public final TableField<PostsRecord, OffsetDateTime> CREATED_AT =
            createField(
                    DSL.name("created_at"),
                    SQLDataType.TIMESTAMPWITHTIMEZONE(6)
                            .defaultValue(
                                    DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)),
                    this,
                    "");

    /** The column <code>public.posts.created_by</code>. */
    public final TableField<PostsRecord, String> CREATED_BY =
            createField(DSL.name("created_by"), SQLDataType.CLOB, this, "");

    /** The column <code>public.posts.updated_at</code>. */
    public final TableField<PostsRecord, OffsetDateTime> UPDATED_AT =
            createField(DSL.name("updated_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /** The column <code>public.posts.version</code>. */
    public final TableField<PostsRecord, Integer> VERSION =
            createField(
                    DSL.name("version"),
                    SQLDataType.INTEGER.defaultValue(DSL.field(DSL.raw("0"), SQLDataType.INTEGER)),
                    this,
                    "");

    private Posts(Name alias, Table<PostsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Posts(Name alias, Table<PostsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /** Create an aliased <code>public.posts</code> table reference */
    public Posts(String alias) {
        this(DSL.name(alias), POSTS);
    }

    /** Create an aliased <code>public.posts</code> table reference */
    public Posts(Name alias) {
        this(alias, POSTS);
    }

    /** Create a <code>public.posts</code> table reference */
    public Posts() {
        this(DSL.name("posts"), null);
    }

    public <O extends Record> Posts(Table<O> child, ForeignKey<O, PostsRecord> key) {
        super(child, key, POSTS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<PostsRecord> getPrimaryKey() {
        return Keys.POSTS_PKEY;
    }

    @Override
    public List<Check<PostsRecord>> getChecks() {
        return Arrays.asList(
                Internal.createCheck(
                        this,
                        DSL.name("check_content_not_blank"),
                        "((length(TRIM(BOTH FROM content)) > 0))",
                        true),
                Internal.createCheck(
                        this,
                        DSL.name("check_status_not_blank"),
                        "((length(TRIM(BOTH FROM status)) > 0))",
                        true),
                Internal.createCheck(
                        this,
                        DSL.name("check_title_not_blank"),
                        "((length(TRIM(BOTH FROM title)) > 0))",
                        true));
    }

    @Override
    public Posts as(String alias) {
        return new Posts(DSL.name(alias), this);
    }

    @Override
    public Posts as(Name alias) {
        return new Posts(alias, this);
    }

    @Override
    public Posts as(Table<?> alias) {
        return new Posts(alias.getQualifiedName(), this);
    }

    /** Rename this table */
    @Override
    public Posts rename(String name) {
        return new Posts(DSL.name(name), null);
    }

    /** Rename this table */
    @Override
    public Posts rename(Name name) {
        return new Posts(name, null);
    }

    /** Rename this table */
    @Override
    public Posts rename(Table<?> name) {
        return new Posts(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<UUID, String, String, String, OffsetDateTime, String, OffsetDateTime, Integer>
            fieldsRow() {
        return (Row8) super.fieldsRow();
    }

    /** Convenience mapping calling {@link SelectField#convertFrom(Function)}. */
    public <U> SelectField<U> mapping(
            Function8<
                            ? super UUID,
                            ? super String,
                            ? super String,
                            ? super String,
                            ? super OffsetDateTime,
                            ? super String,
                            ? super OffsetDateTime,
                            ? super Integer,
                            ? extends U>
                    from) {
        return convertFrom(Records.mapping(from));
    }

    /** Convenience mapping calling {@link SelectField#convertFrom(Class, Function)}. */
    public <U> SelectField<U> mapping(
            Class<U> toType,
            Function8<
                            ? super UUID,
                            ? super String,
                            ? super String,
                            ? super String,
                            ? super OffsetDateTime,
                            ? super String,
                            ? super OffsetDateTime,
                            ? super Integer,
                            ? extends U>
                    from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
